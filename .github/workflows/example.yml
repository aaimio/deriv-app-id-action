on:
  pull_request:
    branches:
      - master # Only trigger on this branch
  issue_comment:
    types: [edited]

jobs:
  generate_app_id:
    timeout-minutes: 5 # Kill job after this amount of minutes.
    runs-on: ubuntu-latest
    steps:
      - name: Generate Deriv App ID for deployment Preview URLs
        id: generate_app_id
        uses: aaron-binary/deriv-app-id-action@master
        with:
          deriv_api_token: ${{ secrets.DERIV_API_TOKEN }}
          accept_edits_from_user: "vercel[bot]"
          max_retries: 5
          preview_url_regexp: 'Preview: \[(.*)\]' # Use single quotes, do not add delimiters.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Comment on pull request with App ID and URLs
        if: steps.generate_app_id.outputs.should_post_comment
        uses: actions/github-script@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const comment_lines = [
                "A production App ID was automatically generated for this PR. ([log](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}))",
                "",
                "- PR: [${{ steps.generate_app_id.outputs.pr_url }}](${{ steps.generate_app_id.outputs.pr_url }})",
                "- URL: [${{ steps.generate_app_id.outputs.preview_url }}](${{ steps.generate_app_id.outputs.preview_url }})",
                "- App ID: `${{ steps.generate_app_id.outputs.app_id }}`",
                "",
                "<details>",
                "<summary>Copy/paste snippet</summary>",
                "",
                "```",
                "- PR: [${{ steps.generate_app_id.outputs.pr_url }}](${{ steps.generate_app_id.outputs.pr_url }})",
                "- URL: [${{ steps.generate_app_id.outputs.preview_url }}](${{ steps.generate_app_id.outputs.preview_url }})",
                "- App ID: `${{ steps.generate_app_id.outputs.app_id }}`",
                "```",
                "",
                "</details>"
            ];
            github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment_lines.join('\n'),
            });
